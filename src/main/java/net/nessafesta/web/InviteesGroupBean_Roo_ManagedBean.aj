// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package net.nessafesta.web;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import javax.faces.validator.LongRangeValidator;
import net.nessafesta.domain.AttendeesGroup;
import net.nessafesta.domain.Invitation;
import net.nessafesta.domain.InviteesGroup;
import net.nessafesta.reference.GuestType;
import net.nessafesta.web.InviteesGroupBean;
import net.nessafesta.web.converter.InvitationConverter;
import net.nessafesta.web.util.MessageFactory;
import org.primefaces.component.autocomplete.AutoComplete;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.component.spinner.Spinner;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;

privileged aspect InviteesGroupBean_Roo_ManagedBean {
    
    declare @type: InviteesGroupBean: @ManagedBean(name = "inviteesGroupBean");
    
    declare @type: InviteesGroupBean: @SessionScoped;
    
    private String InviteesGroupBean.name = "InviteesGroups";
    
    private InviteesGroup InviteesGroupBean.inviteesGroup;
    
    private List<InviteesGroup> InviteesGroupBean.allInviteesGroups;
    
    private boolean InviteesGroupBean.dataVisible = false;
    
    private HtmlPanelGrid InviteesGroupBean.createPanelGrid;
    
    private HtmlPanelGrid InviteesGroupBean.editPanelGrid;
    
    private HtmlPanelGrid InviteesGroupBean.viewPanelGrid;
    
    private boolean InviteesGroupBean.createDialogVisible = false;
    
    private List<AttendeesGroup> InviteesGroupBean.selectedAttendeeGroups;
    
    public String InviteesGroupBean.getName() {
        return name;
    }
    
    public List<String> InviteesGroupBean.getColumns() {
        return columns;
    }
    
    public List<InviteesGroup> InviteesGroupBean.getAllInviteesGroups() {
        return allInviteesGroups;
    }
    
    public void InviteesGroupBean.setAllInviteesGroups(List<InviteesGroup> allInviteesGroups) {
        this.allInviteesGroups = allInviteesGroups;
    }
    
    public String InviteesGroupBean.findAllInviteesGroups() {
        allInviteesGroups = InviteesGroup.findAllInviteesGroups();
        dataVisible = !allInviteesGroups.isEmpty();
        return null;
    }
    
    public boolean InviteesGroupBean.isDataVisible() {
        return dataVisible;
    }
    
    public void InviteesGroupBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid InviteesGroupBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void InviteesGroupBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid InviteesGroupBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void InviteesGroupBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid InviteesGroupBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void InviteesGroupBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid InviteesGroupBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel guestTypeCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        guestTypeCreateOutput.setFor("guestTypeCreateInput");
        guestTypeCreateOutput.setId("guestTypeCreateOutput");
        guestTypeCreateOutput.setValue("Guest Type:");
        htmlPanelGrid.getChildren().add(guestTypeCreateOutput);
        
        AutoComplete guestTypeCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        guestTypeCreateInput.setId("guestTypeCreateInput");
        guestTypeCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{inviteesGroupBean.inviteesGroup.guestType}", GuestType.class));
        guestTypeCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{inviteesGroupBean.completeGuestType}", List.class, new Class[] { String.class }));
        guestTypeCreateInput.setDropdown(true);
        guestTypeCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(guestTypeCreateInput);
        
        Message guestTypeCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        guestTypeCreateInputMessage.setId("guestTypeCreateInputMessage");
        guestTypeCreateInputMessage.setFor("guestTypeCreateInput");
        guestTypeCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(guestTypeCreateInputMessage);
        
        OutputLabel invitedCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        invitedCreateOutput.setFor("invitedCreateInput");
        invitedCreateOutput.setId("invitedCreateOutput");
        invitedCreateOutput.setValue("Invited:");
        htmlPanelGrid.getChildren().add(invitedCreateOutput);
        
        Spinner invitedCreateInput = (Spinner) application.createComponent(Spinner.COMPONENT_TYPE);
        invitedCreateInput.setId("invitedCreateInput");
        invitedCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{inviteesGroupBean.inviteesGroup.invited}", Integer.class));
        invitedCreateInput.setRequired(true);
        invitedCreateInput.setMin(1.0);
        LongRangeValidator invitedCreateInputValidator = new LongRangeValidator();
        invitedCreateInputValidator.setMinimum(1);
        invitedCreateInput.addValidator(invitedCreateInputValidator);
        
        htmlPanelGrid.getChildren().add(invitedCreateInput);
        
        Message invitedCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        invitedCreateInputMessage.setId("invitedCreateInputMessage");
        invitedCreateInputMessage.setFor("invitedCreateInput");
        invitedCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(invitedCreateInputMessage);
        
        OutputLabel invitationCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        invitationCreateOutput.setFor("invitationCreateInput");
        invitationCreateOutput.setId("invitationCreateOutput");
        invitationCreateOutput.setValue("Invitation:");
        htmlPanelGrid.getChildren().add(invitationCreateOutput);
        
        AutoComplete invitationCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        invitationCreateInput.setId("invitationCreateInput");
        invitationCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{inviteesGroupBean.inviteesGroup.invitation}", Invitation.class));
        invitationCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{inviteesGroupBean.completeInvitation}", List.class, new Class[] { String.class }));
        invitationCreateInput.setDropdown(true);
        invitationCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "invitation", String.class));
        invitationCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{invitation.title} #{invitation.numberGuests} #{invitation.notes}", String.class));
        invitationCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{invitation}", Invitation.class));
        invitationCreateInput.setConverter(new InvitationConverter());
        invitationCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(invitationCreateInput);
        
        Message invitationCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        invitationCreateInputMessage.setId("invitationCreateInputMessage");
        invitationCreateInputMessage.setFor("invitationCreateInput");
        invitationCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(invitationCreateInputMessage);
        
        HtmlOutputText attendeeGroupsCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        attendeeGroupsCreateOutput.setId("attendeeGroupsCreateOutput");
        attendeeGroupsCreateOutput.setValue("Attendee Groups:");
        htmlPanelGrid.getChildren().add(attendeeGroupsCreateOutput);
        
        HtmlOutputText attendeeGroupsCreateInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        attendeeGroupsCreateInput.setId("attendeeGroupsCreateInput");
        attendeeGroupsCreateInput.setValue("This relationship is managed from the AttendeesGroup side");
        htmlPanelGrid.getChildren().add(attendeeGroupsCreateInput);
        
        Message attendeeGroupsCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        attendeeGroupsCreateInputMessage.setId("attendeeGroupsCreateInputMessage");
        attendeeGroupsCreateInputMessage.setFor("attendeeGroupsCreateInput");
        attendeeGroupsCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(attendeeGroupsCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid InviteesGroupBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel guestTypeEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        guestTypeEditOutput.setFor("guestTypeEditInput");
        guestTypeEditOutput.setId("guestTypeEditOutput");
        guestTypeEditOutput.setValue("Guest Type:");
        htmlPanelGrid.getChildren().add(guestTypeEditOutput);
        
        AutoComplete guestTypeEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        guestTypeEditInput.setId("guestTypeEditInput");
        guestTypeEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{inviteesGroupBean.inviteesGroup.guestType}", GuestType.class));
        guestTypeEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{inviteesGroupBean.completeGuestType}", List.class, new Class[] { String.class }));
        guestTypeEditInput.setDropdown(true);
        guestTypeEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(guestTypeEditInput);
        
        Message guestTypeEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        guestTypeEditInputMessage.setId("guestTypeEditInputMessage");
        guestTypeEditInputMessage.setFor("guestTypeEditInput");
        guestTypeEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(guestTypeEditInputMessage);
        
        OutputLabel invitedEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        invitedEditOutput.setFor("invitedEditInput");
        invitedEditOutput.setId("invitedEditOutput");
        invitedEditOutput.setValue("Invited:");
        htmlPanelGrid.getChildren().add(invitedEditOutput);
        
        Spinner invitedEditInput = (Spinner) application.createComponent(Spinner.COMPONENT_TYPE);
        invitedEditInput.setId("invitedEditInput");
        invitedEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{inviteesGroupBean.inviteesGroup.invited}", Integer.class));
        invitedEditInput.setRequired(true);
        invitedEditInput.setMin(1.0);
        LongRangeValidator invitedEditInputValidator = new LongRangeValidator();
        invitedEditInputValidator.setMinimum(1);
        invitedEditInput.addValidator(invitedEditInputValidator);
        
        htmlPanelGrid.getChildren().add(invitedEditInput);
        
        Message invitedEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        invitedEditInputMessage.setId("invitedEditInputMessage");
        invitedEditInputMessage.setFor("invitedEditInput");
        invitedEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(invitedEditInputMessage);
        
        OutputLabel invitationEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        invitationEditOutput.setFor("invitationEditInput");
        invitationEditOutput.setId("invitationEditOutput");
        invitationEditOutput.setValue("Invitation:");
        htmlPanelGrid.getChildren().add(invitationEditOutput);
        
        AutoComplete invitationEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        invitationEditInput.setId("invitationEditInput");
        invitationEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{inviteesGroupBean.inviteesGroup.invitation}", Invitation.class));
        invitationEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{inviteesGroupBean.completeInvitation}", List.class, new Class[] { String.class }));
        invitationEditInput.setDropdown(true);
        invitationEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "invitation", String.class));
        invitationEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{invitation.title} #{invitation.numberGuests} #{invitation.notes}", String.class));
        invitationEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{invitation}", Invitation.class));
        invitationEditInput.setConverter(new InvitationConverter());
        invitationEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(invitationEditInput);
        
        Message invitationEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        invitationEditInputMessage.setId("invitationEditInputMessage");
        invitationEditInputMessage.setFor("invitationEditInput");
        invitationEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(invitationEditInputMessage);
        
        HtmlOutputText attendeeGroupsEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        attendeeGroupsEditOutput.setId("attendeeGroupsEditOutput");
        attendeeGroupsEditOutput.setValue("Attendee Groups:");
        htmlPanelGrid.getChildren().add(attendeeGroupsEditOutput);
        
        HtmlOutputText attendeeGroupsEditInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        attendeeGroupsEditInput.setId("attendeeGroupsEditInput");
        attendeeGroupsEditInput.setValue("This relationship is managed from the AttendeesGroup side");
        htmlPanelGrid.getChildren().add(attendeeGroupsEditInput);
        
        Message attendeeGroupsEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        attendeeGroupsEditInputMessage.setId("attendeeGroupsEditInputMessage");
        attendeeGroupsEditInputMessage.setFor("attendeeGroupsEditInput");
        attendeeGroupsEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(attendeeGroupsEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid InviteesGroupBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText guestTypeLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        guestTypeLabel.setId("guestTypeLabel");
        guestTypeLabel.setValue("Guest Type:");
        htmlPanelGrid.getChildren().add(guestTypeLabel);
        
        HtmlOutputText guestTypeValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        guestTypeValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{inviteesGroupBean.inviteesGroup.guestType}", String.class));
        htmlPanelGrid.getChildren().add(guestTypeValue);
        
        HtmlOutputText invitedLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        invitedLabel.setId("invitedLabel");
        invitedLabel.setValue("Invited:");
        htmlPanelGrid.getChildren().add(invitedLabel);
        
        HtmlOutputText invitedValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        invitedValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{inviteesGroupBean.inviteesGroup.invited}", String.class));
        htmlPanelGrid.getChildren().add(invitedValue);
        
        HtmlOutputText invitationLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        invitationLabel.setId("invitationLabel");
        invitationLabel.setValue("Invitation:");
        htmlPanelGrid.getChildren().add(invitationLabel);
        
        HtmlOutputText invitationValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        invitationValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{inviteesGroupBean.inviteesGroup.invitation}", Invitation.class));
        invitationValue.setConverter(new InvitationConverter());
        htmlPanelGrid.getChildren().add(invitationValue);
        
        HtmlOutputText attendeeGroupsLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        attendeeGroupsLabel.setId("attendeeGroupsLabel");
        attendeeGroupsLabel.setValue("Attendee Groups:");
        htmlPanelGrid.getChildren().add(attendeeGroupsLabel);
        
        HtmlOutputText attendeeGroupsValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        attendeeGroupsValue.setId("attendeeGroupsValue");
        attendeeGroupsValue.setValue("This relationship is managed from the AttendeesGroup side");
        htmlPanelGrid.getChildren().add(attendeeGroupsValue);
        
        return htmlPanelGrid;
    }
    
    public InviteesGroup InviteesGroupBean.getInviteesGroup() {
        if (inviteesGroup == null) {
            inviteesGroup = new InviteesGroup();
        }
        return inviteesGroup;
    }
    
    public void InviteesGroupBean.setInviteesGroup(InviteesGroup inviteesGroup) {
        this.inviteesGroup = inviteesGroup;
    }
    
    public List<GuestType> InviteesGroupBean.completeGuestType(String query) {
        List<GuestType> suggestions = new ArrayList<GuestType>();
        for (GuestType guestType : GuestType.values()) {
            if (guestType.name().toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(guestType);
            }
        }
        return suggestions;
    }
    
    public List<Invitation> InviteesGroupBean.completeInvitation(String query) {
        List<Invitation> suggestions = new ArrayList<Invitation>();
        for (Invitation invitation : Invitation.findAllInvitations()) {
            String invitationStr = String.valueOf(invitation.getTitle() +  " "  + invitation.getNumberGuests() +  " "  + invitation.getNotes());
            if (invitationStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(invitation);
            }
        }
        return suggestions;
    }
    
    public List<AttendeesGroup> InviteesGroupBean.getSelectedAttendeeGroups() {
        return selectedAttendeeGroups;
    }
    
    public void InviteesGroupBean.setSelectedAttendeeGroups(List<AttendeesGroup> selectedAttendeeGroups) {
        if (selectedAttendeeGroups != null) {
            inviteesGroup.setAttendeeGroups(new HashSet<AttendeesGroup>(selectedAttendeeGroups));
        }
        this.selectedAttendeeGroups = selectedAttendeeGroups;
    }
    
    public String InviteesGroupBean.onEdit() {
        if (inviteesGroup != null && inviteesGroup.getAttendeeGroups() != null) {
            selectedAttendeeGroups = new ArrayList<AttendeesGroup>(inviteesGroup.getAttendeeGroups());
        }
        return null;
    }
    
    public boolean InviteesGroupBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void InviteesGroupBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String InviteesGroupBean.displayList() {
        createDialogVisible = false;
        findAllInviteesGroups();
        return "inviteesGroup";
    }
    
    public String InviteesGroupBean.displayCreateDialog() {
        inviteesGroup = new InviteesGroup();
        createDialogVisible = true;
        return "inviteesGroup";
    }
    
    public String InviteesGroupBean.persist() {
        String message = "";
        if (inviteesGroup.getId() != null) {
            inviteesGroup.merge();
            message = "message_successfully_updated";
        } else {
            inviteesGroup.persist();
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "InviteesGroup");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllInviteesGroups();
    }
    
    public String InviteesGroupBean.delete() {
        inviteesGroup.remove();
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "InviteesGroup");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllInviteesGroups();
    }
    
    public void InviteesGroupBean.reset() {
        inviteesGroup = null;
        selectedAttendeeGroups = null;
        createDialogVisible = false;
    }
    
    public void InviteesGroupBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
